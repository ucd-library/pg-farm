apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pgfarm-instance
spec:
  selector:
    matchLabels:
      app:  
  replicas: 1
  serviceName: 
  template:
    metadata:
      labels:
        pgfarm-type: database
        app:
    spec:
      containers:
      - name: postgres
        image: pg
        args: ["-c", "max_connections=100"]
        imagePullPolicy: IfNotPresent
        env:
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "password"
        - name: POSTGRES_PASSWORD
          value: "postgres"
        resources:
          limits:
            memory: "3Gi"
            cpu: "1"
          requests:
            memory: "1Gi"
            cpu: "0.5"
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: 
          mountPath: /var/lib/postgresql/data
        - name: pg-socket
          mountPath: /var/run/postgresql
      - name: pg-helper
        image: 
        args: ["npm", "run", "pg-helper"]
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: LOG_LEVEL
          value: "info"
        - name : "GOOGLE_APPLICATION_CREDENTIALS"
          value : "/etc/google/service-account.json"
        # - name: METRICS_ENABLED
        #   value: "true"
        # - name: METRICS_EXPORT_GC
        #   value: "true"
        - name: SERVICE_NAME
          value: "pg-helper"
        volumeMounts:
        - name: pg-socket
          mountPath: /var/run/postgresql
        - name: service-account
          mountPath: /etc/google        
      volumes:
      - name: pg-socket
        emptyDir: {}
      - name: service-account
        secret:
          secretName: service-account

  volumeClaimTemplates:
  - metadata:
      name: postgres-persistent-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi